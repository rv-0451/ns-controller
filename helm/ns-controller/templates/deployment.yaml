---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ns-controller-controller-manager
  namespace: ns-controller
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      control-plane: controller-manager
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
        # This is for Helm to always restart the pod, so the init container will always inject CA to the webhook
        rollme: {{ randAlphaNum 5 | quote }}
      creationTimestamp: null
      labels:
        control-plane: controller-manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - arm64
                      - ppc64le
                      - s390x
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
      initContainers:
        - name: certgen-webhooks
          args:
            - -svc=ns-controller-webhook.ns-controller.svc
            - -org=organization.com
            # - -storagetype=filesystem
            # - -certdir=/tmp/webhook/certs/
            - -storagetype=secret
            - -secretname={{ .Values.init.secretName }}
            - -secretnamespace=ns-controller
            - -certname=tls.crt
            - -keyname=tls.key
            - -clientcaname=ca.crt
            - -validatingwebhooknames={{ .Values.webhookConfig.webhookNsName }}
          image: "{{ .Values.init.repository }}:{{ .Values.init.tag }}"
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 500m
              memory: 64Mi
            requests:
              cpu: 10m
              memory: 32Mi
          # volumeMounts:
          #   - mountPath: /tmp/webhook/certs
          #     name: webhook-certs
      containers:
        - args:
            - --secure-listen-address=0.0.0.0:8443
            - --upstream=http://127.0.0.1:8080/
            - --logtostderr=true
            - --v=0
          image: 192.168.33.16:5000/kubebuilder/kube-rbac-proxy:v0.13.1
          imagePullPolicy: IfNotPresent
          name: kube-rbac-proxy
          ports:
            - containerPort: 8443
              name: https
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 5m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
            - --health-probe-bind-address=:8081
            - --metrics-bind-address=127.0.0.1:8080
            - --leader-elect
            - --overprovisioning={{ .Values.webhookConfig.overprovisioning }}
          command:
            - /manager
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: webhook-certs
              readOnly: true
              mountPath: /tmp/k8s-webhook-server/serving-certs
            # - mountPath: /tmp/k8s-webhook-server/serving-certs
            #   name: webhook-certs
            #   readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
      serviceAccount: ns-controller-controller-manager
      serviceAccountName: ns-controller-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
        - name: webhook-certs
          secret:
            secretName: {{ .Values.init.secretName }}
      #   - name: webhook-certs
      #     emptyDir: {}
